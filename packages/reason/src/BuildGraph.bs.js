// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var RList$Rationale = require("rationale/src/RList.js");
var Option$Rationale = require("rationale/src/Option.js");
var Function$Rationale = require("rationale/src/Function.js");

var isEqual = Caml_obj.caml_equal;

var isNotEqual = Caml_obj.caml_notequal;

function subjectId(t) {
  return t[/* subjectId */1];
}

function propertyId(t) {
  return t[/* propertyId */2];
}

function edgeId(edge) {
  var match = edge === /* SUBJECT */0;
  if (match) {
    return subjectId;
  } else {
    return propertyId;
  }
}

var partial_arg = Function$Rationale.Infix[/* ||> */1];

function hasSubjectId(param) {
  return partial_arg(subjectId, isEqual, param);
}

var partial_arg$1 = Function$Rationale.Infix[/* ||> */1];

function hasPropertyId(param) {
  return partial_arg$1(propertyId, isEqual, param);
}

function value(t) {
  return t[/* value */3];
}

function id(t) {
  return t[/* id */0];
}

var Fact = /* module */[
  /* subjectId */subjectId,
  /* propertyId */propertyId,
  /* edgeId */edgeId,
  /* hasSubjectId */hasSubjectId,
  /* hasPropertyId */hasPropertyId,
  /* value */value,
  /* id */id
];

function id$1(e) {
  return e[/* id */0];
}

function graph(e) {
  return e[/* graph */1];
}

var Thing = /* module */[
  /* id */id$1,
  /* graph */graph
];

function run(q, f) {
  var match = q[/* q */2] === /* IS */0;
  var equality;
  if (match) {
    var partial_arg = q[/* id */1];
    equality = (function (param) {
        return Caml_obj.caml_equal(partial_arg, param);
      });
  } else {
    var partial_arg$1 = q[/* id */1];
    equality = (function (param) {
        return Caml_obj.caml_notequal(partial_arg$1, param);
      });
  }
  var match$1 = q[/* edge */0];
  if (match$1) {
    return Curry._1(equality, f[/* propertyId */2]);
  } else {
    return Curry._1(equality, f[/* subjectId */1]);
  }
}

function qOr(q1, q2, f) {
  if (run(q1, f)) {
    return true;
  } else {
    return run(q2, f);
  }
}

function qAnd(q1, q2, f) {
  if (run(q1, f)) {
    return run(q2, f);
  } else {
    return false;
  }
}

var Query = /* module */[
  /* run */run,
  /* qOr */qOr,
  /* qAnd */qAnd
];

function query(q, t) {
  return List.filter((function (param) {
                  return run(q, param);
                }))(t);
}

function find(id, t) {
  return RList$Rationale.find((function (e) {
                return e[/* id */0] === id;
              }), t);
}

function withEdge(edge, id) {
  var partial_arg = /* record */[
    /* edge */edge,
    /* id */id,
    /* q : IS */0
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withoutEdge(edge, id) {
  var partial_arg = /* record */[
    /* edge */edge,
    /* id */id,
    /* q : IS_NOT */1
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withSubject(id) {
  var partial_arg = /* record */[
    /* edge : SUBJECT */0,
    /* id */id,
    /* q : IS */0
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withoutSubject(id) {
  var partial_arg = /* record */[
    /* edge : SUBJECT */0,
    /* id */id,
    /* q : IS_NOT */1
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withProperty(id) {
  var partial_arg = /* record */[
    /* edge : PROPERTY */1,
    /* id */id,
    /* q : IS */0
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withoutProperty(id) {
  var partial_arg = /* record */[
    /* edge : PROPERTY */1,
    /* id */id,
    /* q : IS_NOT */1
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withIdAsAnyEdge(id) {
  var partial_arg = /* record */[
    /* edge : PROPERTY */1,
    /* id */id,
    /* q : IS */0
  ];
  var partial_arg$1 = /* record */[
    /* edge : PROPERTY */1,
    /* id */id,
    /* q : IS */0
  ];
  return List.filter((function (param) {
                return qOr(partial_arg$1, partial_arg, param);
              }));
}

function withIdAsNoEdge(id) {
  var partial_arg = /* record */[
    /* edge : PROPERTY */1,
    /* id */id,
    /* q : IS_NOT */1
  ];
  var partial_arg$1 = /* record */[
    /* edge : PROPERTY */1,
    /* id */id,
    /* q : IS_NOT */1
  ];
  return List.filter((function (param) {
                return qOr(partial_arg$1, partial_arg, param);
              }));
}

var FactFilters = /* module */[
  /* query */query,
  /* find */find,
  /* filter */List.filter,
  /* withEdge */withEdge,
  /* withoutEdge */withoutEdge,
  /* withSubject */withSubject,
  /* withoutSubject */withoutSubject,
  /* withProperty */withProperty,
  /* withoutProperty */withoutProperty,
  /* withIdAsAnyEdge */withIdAsAnyEdge,
  /* withIdAsNoEdge */withIdAsNoEdge
];

function find$1(id, t) {
  return RList$Rationale.find((function (e) {
                return e[/* id */0] === id;
              }), t);
}

var ThingFilters = /* module */[/* find */find$1];

function build(param) {
  var things = List.map((function (e) {
          return /* record */[
                  /* id */e,
                  /* graph : record */[
                    /* facts : [] */0,
                    /* things : [] */0
                  ]
                ];
        }), /* :: */[
        "1",
        /* :: */[
          "2",
          /* :: */[
            "3",
            /* [] */0
          ]
        ]
      ]);
  var facts = List.map((function (param) {
          return /* record */[
                  /* id */param[0],
                  /* subjectId */param[1],
                  /* propertyId */param[2],
                  /* value */param[3]
                ];
        }), /* :: */[
        /* tuple */[
          "0",
          "1",
          "2",
          "sdfsdf"
        ],
        /* :: */[
          /* tuple */[
            "8",
            "1",
            "3",
            "bar"
          ],
          /* [] */0
        ]
      ]);
  var graph = /* record */[
    /* facts */facts,
    /* things */things
  ];
  for(var x = 0 ,x_finish = List.length(things); x <= x_finish; ++x){
    List.nth(things, x)[/* graph */1] = graph;
  }
  return graph;
}

function things(g) {
  return g[/* things */1];
}

function facts(g) {
  return g[/* facts */0];
}

function findFact(id) {
  var partial_arg = Function$Rationale.Infix[/* ||> */1];
  return (function (param) {
      return partial_arg(facts, (function (param) {
                    return find(id, param);
                  }), param);
    });
}

function findThing(id) {
  var partial_arg = Function$Rationale.Infix[/* ||> */1];
  return (function (param) {
      return partial_arg(things, (function (param) {
                    return find$1(id, param);
                  }), param);
    });
}

var Graph = /* module */[
  /* build */build,
  /* things */things,
  /* facts */facts,
  /* findFact */findFact,
  /* findThing */findThing
];

function findThing$1(g, edge, t) {
  var __x = edgeId(edge)(t);
  return findThing(__x)(g);
}

var FactG = /* module */[/* findThing */findThing$1];

function unpackOptionList(e) {
  return List.map((function (param) {
                return Option$Rationale.toExn("mistake", param);
              }), List.filter(Option$Rationale.isSome)(e));
}

var partial_arg$2 = Function$Rationale.Infix[/* ||> */1];

function allFacts(param) {
  return partial_arg$2(graph, facts, param);
}

function filterFacts(f, t) {
  return Curry._2(f, t[/* id */0], Curry._1(allFacts, t));
}

function isEdgeForFacts(edge) {
  return (function (param) {
      return filterFacts((function (param) {
                    return withEdge(edge, param);
                  }), param);
    });
}

function isSubjectForFacts(param) {
  return filterFacts((function (param) {
                return withEdge(/* SUBJECT */0, param);
              }), param);
}

function isPropertyForFacts(param) {
  return filterFacts((function (param) {
                return withEdge(/* PROPERTY */1, param);
              }), param);
}

function facts$1(param) {
  return filterFacts(withIdAsAnyEdge, param);
}

function filterFactsAndSelectThings(fromEdge, toEdge, t) {
  var partial_arg = t[/* graph */1];
  return unpackOptionList(List.map((function (param) {
                    return findThing$1(partial_arg, toEdge, param);
                  }), filterFacts((function (param) {
                        return withEdge(fromEdge, param);
                      }), t)));
}

function connectedPropertyThings(param) {
  return filterFactsAndSelectThings(/* SUBJECT */0, /* PROPERTY */1, param);
}

function connectedSubjectThings(param) {
  return filterFactsAndSelectThings(/* PROPERTY */1, /* SUBJECT */0, param);
}

function connectedPropertyWithId(id, t) {
  return find$1(id, filterFactsAndSelectThings(/* SUBJECT */0, /* PROPERTY */1, t));
}

function connectedSubjectWithId(id, t) {
  return find$1(id, filterFactsAndSelectThings(/* PROPERTY */1, /* SUBJECT */0, t));
}

var ThingG = /* module */[
  /* allFacts */allFacts,
  /* filterFacts */filterFacts,
  /* isEdgeForFacts */isEdgeForFacts,
  /* isSubjectForFacts */isSubjectForFacts,
  /* isPropertyForFacts */isPropertyForFacts,
  /* facts */facts$1,
  /* filterFactsAndSelectThings */filterFactsAndSelectThings,
  /* connectedPropertyThings */connectedPropertyThings,
  /* connectedSubjectThings */connectedSubjectThings,
  /* connectedPropertyWithId */connectedPropertyWithId,
  /* connectedSubjectWithId */connectedSubjectWithId
];

exports.isEqual = isEqual;
exports.isNotEqual = isNotEqual;
exports.Fact = Fact;
exports.Thing = Thing;
exports.Query = Query;
exports.FactFilters = FactFilters;
exports.ThingFilters = ThingFilters;
exports.Graph = Graph;
exports.FactG = FactG;
exports.unpackOptionList = unpackOptionList;
exports.ThingG = ThingG;
/* RList-Rationale Not a pure module */
