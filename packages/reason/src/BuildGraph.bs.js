// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var RList$Rationale = require("rationale/src/RList.js");
var Option$Rationale = require("rationale/src/Option.js");
var Function$Rationale = require("rationale/src/Function.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function getId(thing) {
  return thing[0][/* id */0];
}

var isEqual = Caml_obj.caml_equal;

function subjectId(t) {
  return t[/* subjectId */1];
}

function propertyId(t) {
  return t[/* propertyId */2];
}

var partial_arg = Function$Rationale.Infix[/* ||> */1];

function hasSubjectId(param) {
  return partial_arg(subjectId, isEqual, param);
}

var partial_arg$1 = Function$Rationale.Infix[/* ||> */1];

function hasPropertyId(param) {
  return partial_arg$1(propertyId, isEqual, param);
}

function value(t) {
  return t[/* value */3];
}

var Fact = /* module */[
  /* subjectId */subjectId,
  /* propertyId */propertyId,
  /* hasSubjectId */hasSubjectId,
  /* hasPropertyId */hasPropertyId,
  /* value */value
];

function isFact(t) {
  if (t.tag) {
    return false;
  } else {
    return true;
  }
}

var partial_arg$2 = Function$Rationale.Infix[/* ||> */1];

function isNonfact(param) {
  return partial_arg$2(isFact, (function (e) {
                return !e;
              }), param);
}

function toFactExt(t) {
  if (t.tag) {
    throw [
          Caml_builtin_exceptions.failure,
          "Assumed nonfact was fact"
        ];
  } else {
    return t[0];
  }
}

function toNonFactExt(t) {
  if (t.tag) {
    return t[0];
  } else {
    throw [
          Caml_builtin_exceptions.failure,
          "Assumed fact was nonfact"
        ];
  }
}

function bimap(fn1, fn2, t) {
  var match = isFact(t);
  if (match) {
    return Curry._1(fn1, toFactExt(t));
  } else {
    return Curry._1(fn2, toNonFactExt(t));
  }
}

function id(param) {
  return bimap((function (e) {
                return e[/* id */0];
              }), (function (e) {
                return e[/* id */0];
              }), param);
}

var Thing = /* module */[
  /* isFact */isFact,
  /* isNonfact */isNonfact,
  /* toFactExt */toFactExt,
  /* toNonFactExt */toNonFactExt,
  /* bimap */bimap,
  /* id */id
];

function build(param) {
  var empty = /* record */[/* things : [] */0];
  var nonfacts = List.map((function (e) {
          return /* record */[
                  /* id */e,
                  /* graph */empty
                ];
        }), /* :: */[
        "1",
        /* :: */[
          "2",
          /* :: */[
            "3",
            /* [] */0
          ]
        ]
      ]);
  var facts = List.map((function (param) {
          return /* record */[
                  /* id */param[0],
                  /* subjectId */param[1],
                  /* propertyId */param[2],
                  /* value */param[3],
                  /* graph */empty
                ];
        }), /* :: */[
        /* tuple */[
          "0",
          "1",
          "2",
          "sdfsdf"
        ],
        /* :: */[
          /* tuple */[
            "8",
            "1",
            "3",
            "bar"
          ],
          /* [] */0
        ]
      ]);
  var graph = /* record */[/* things */List.append(List.map((function (e) {
                return /* Fact */Block.__(0, [e]);
              }), facts), List.map((function (e) {
                return /* Nonfact */Block.__(1, [e]);
              }), nonfacts))];
  for(var x = 0 ,x_finish = List.length(nonfacts); x <= x_finish; ++x){
    List.nth(nonfacts, x)[/* graph */1] = graph;
  }
  for(var x$1 = 0 ,x_finish$1 = List.length(facts); x$1 <= x_finish$1; ++x$1){
    List.nth(facts, x$1)[/* graph */4] = graph;
  }
  return graph;
}

function things(g) {
  return g[/* things */0];
}

var partial_arg$3 = List.filter(isFact);

var partial_arg$4 = Function$Rationale.Infix[/* ||> */1];

function partial_arg$5(param) {
  return partial_arg$4(things, partial_arg$3, param);
}

var partial_arg$6 = Function$Rationale.Infix[/* ||> */1];

function facts(param) {
  return partial_arg$6(partial_arg$5, (function (param) {
                return List.map(toFactExt, param);
              }), param);
}

var partial_arg$7 = List.filter(isNonfact);

var partial_arg$8 = Function$Rationale.Infix[/* ||> */1];

function partial_arg$9(param) {
  return partial_arg$8(things, partial_arg$7, param);
}

var partial_arg$10 = Function$Rationale.Infix[/* ||> */1];

function nonfacts(param) {
  return partial_arg$10(partial_arg$9, (function (param) {
                return List.map(toNonFactExt, param);
              }), param);
}

function findFact(g, id) {
  return RList$Rationale.find((function (e) {
                return e[/* id */0] === id;
              }), Curry._1(facts, g));
}

function findNonfact(g, id) {
  return RList$Rationale.find((function (e) {
                return e[/* id */0] === id;
              }), Curry._1(nonfacts, g));
}

function findFactWithSubject(id) {
  var partial_arg = Function$Rationale.Infix[/* ||> */1];
  var partial_arg$1 = function (param) {
    return partial_arg(subjectId, (function (param) {
                  return Caml_obj.caml_equal(id, param);
                }), param);
  };
  var partial_arg$2 = function (param) {
    return RList$Rationale.find(partial_arg$1, param);
  };
  var partial_arg$3 = Function$Rationale.Infix[/* ||> */1];
  return (function (param) {
      return partial_arg$3(facts, partial_arg$2, param);
    });
}

function findFactWithProperty(id) {
  var partial_arg = Function$Rationale.Infix[/* ||> */1];
  var partial_arg$1 = function (param) {
    return partial_arg(propertyId, (function (param) {
                  return Caml_obj.caml_equal(id, param);
                }), param);
  };
  var partial_arg$2 = function (param) {
    return RList$Rationale.find(partial_arg$1, param);
  };
  var partial_arg$3 = Function$Rationale.Infix[/* ||> */1];
  return (function (param) {
      return partial_arg$3(facts, partial_arg$2, param);
    });
}

function findThingWithId(id$1) {
  var partial_arg = Function$Rationale.Infix[/* ||> */1];
  var partial_arg$1 = function (param) {
    return partial_arg(id, (function (param) {
                  return Caml_obj.caml_equal(id$1, param);
                }), param);
  };
  var partial_arg$2 = function (param) {
    return RList$Rationale.find(partial_arg$1, param);
  };
  var partial_arg$3 = Function$Rationale.Infix[/* ||> */1];
  return (function (param) {
      return partial_arg$3(things, partial_arg$2, param);
    });
}

var Graph = /* module */[
  /* build */build,
  /* things */things,
  /* facts */facts,
  /* nonfacts */nonfacts,
  /* findFact */findFact,
  /* findNonfact */findNonfact,
  /* findFactWithSubject */findFactWithSubject,
  /* findFactWithProperty */findFactWithProperty,
  /* findThingWithId */findThingWithId
];

function facts$1(t) {
  return t[/* graph */1][/* things */0];
}

var Nonfact = /* module */[/* facts */facts$1];

function findFactWithSubject$1(a, __x) {
  return findFactWithSubject(__x)(a[/* graph */4]);
}

function findFactWithProperty$1(a, __x) {
  return findFactWithProperty(__x)(a[/* graph */4]);
}

function findThingWithId$1(a, __x) {
  return findThingWithId(__x)(a[/* graph */4]);
}

function findProperty(t) {
  return Curry._2(Option$Rationale.Infix[/* <$> */1], findThingWithId$1(t, t[/* propertyId */2]), toNonFactExt);
}

function findSubject(t) {
  return findThingWithId$1(t, t[/* subjectId */1]);
}

var FactWithGraph = /* module */[
  /* findFactWithSubject */findFactWithSubject$1,
  /* findFactWithProperty */findFactWithProperty$1,
  /* findThingWithId */findThingWithId$1,
  /* findProperty */findProperty,
  /* findSubject */findSubject
];

var ThingWithGraph = /* module */[];

exports.getId = getId;
exports.isEqual = isEqual;
exports.Fact = Fact;
exports.Thing = Thing;
exports.Graph = Graph;
exports.Nonfact = Nonfact;
exports.FactWithGraph = FactWithGraph;
exports.ThingWithGraph = ThingWithGraph;
/* partial_arg Not a pure module */
