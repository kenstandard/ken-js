// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Option$Rationale = require("rationale/src/Option.js");
var Function$Rationale = require("rationale/src/Function.js");

function convertId(id, resourceId, baseId) {
  var idd = Option$Rationale.$$default("random-id", id);
  return baseId + ("/" + (resourceId + ("/" + idd)));
}

function convertIds(g) {
  return $$Array.map((function (r) {
                return /* record */[
                        /* id */convertId(r[/* id */0], r[/* resourceId */2], r[/* baseId */1]),
                        /* baseId */r[/* baseId */1],
                        /* resourceId */r[/* resourceId */2],
                        /* facts */$$Array.map((function (f) {
                                return /* record */[
                                        /* id */f[/* id */0],
                                        /* property */f[/* property */1],
                                        /* baseId */f[/* baseId */2],
                                        /* resourceId */f[/* resourceId */3],
                                        /* value */f[/* value */4]
                                      ];
                              }), r[/* facts */3]),
                        /* templates */r[/* templates */4]
                      ];
              }), g);
}

function valueToArray(value) {
  if (value.tag) {
    return value[0];
  } else {
    return /* array */[value[0]];
  }
}

function flattenValues(g) {
  return $$Array.map((function (r) {
                return /* record */[
                        /* id */r[/* id */0],
                        /* baseId */r[/* baseId */1],
                        /* resourceId */r[/* resourceId */2],
                        /* facts */Belt_Array.concatMany($$Array.map((function (f) {
                                    return $$Array.map((function (value) {
                                                  return /* record */[
                                                          /* id */f[/* id */0],
                                                          /* property */f[/* property */1],
                                                          /* baseId */f[/* baseId */2],
                                                          /* resourceId */f[/* resourceId */3],
                                                          /* value : String */Block.__(0, [value])
                                                        ];
                                                }), valueToArray(f[/* value */4]));
                                  }), r[/* facts */3])),
                        /* templates */r[/* templates */4]
                      ];
              }), g);
}

function lastStepConvert(g) {
  return $$Array.to_list(Belt_Array.concatMany($$Array.map((function (thing) {
                        return $$Array.map((function (fact) {
                                      var match = fact[/* value */4];
                                      var tmp;
                                      tmp = match.tag ? "ERROR" : match[0];
                                      return /* record */[
                                              /* id : record */[
                                                /* id */"fact-id-implement-me!",
                                                /* isPublic */false
                                              ],
                                              /* subjectId : record */[
                                                /* id */thing[/* id */0],
                                                /* isPublic */true
                                              ],
                                              /* propertyId : record */[
                                                /* id */fact[/* property */1],
                                                /* isPublic */true
                                              ],
                                              /* baseId : record */[
                                                /* id */fact[/* baseId */2],
                                                /* isPublic */true
                                              ],
                                              /* value : record */[/* valueType : String */Block.__(1, [tmp])]
                                            ];
                                    }), thing[/* facts */3]);
                      }), g)));
}

var partial_arg = Function$Rationale.Infix[/* ||> */1];

function partial_arg$1(param) {
  return partial_arg(convertIds, flattenValues, param);
}

var partial_arg$2 = Function$Rationale.Infix[/* ||> */1];

function run(param) {
  return partial_arg$2(partial_arg$1, lastStepConvert, param);
}

exports.convertId = convertId;
exports.convertIds = convertIds;
exports.valueToArray = valueToArray;
exports.flattenValues = flattenValues;
exports.lastStepConvert = lastStepConvert;
exports.run = run;
/* Option-Rationale Not a pure module */
