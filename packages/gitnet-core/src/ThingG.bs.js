// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Base$Reason = require("./Base.bs.js");
var Fact$Reason = require("./Fact.bs.js");
var Graph$Reason = require("./Graph.bs.js");
var Option$Rationale = require("rationale/src/Option.js");
var Function$Rationale = require("rationale/src/Function.js");

function unpackOptionList(e) {
  return List.map((function (param) {
                return Option$Rationale.toExn("mistake", param);
              }), List.filter(Option$Rationale.isSome)(e));
}

var partial_arg = Base$Reason.Thing[/* graph */1];

var partial_arg$1 = Function$Rationale.Infix[/* ||> */1];

function allFacts(param) {
  return partial_arg$1(partial_arg, Graph$Reason.facts, param);
}

function filterFacts(f, t) {
  return Curry._2(f, Base$Reason.Thing[/* id */0](t), allFacts(t));
}

function isEdgeForFacts(edge) {
  var partial_arg = Fact$Reason.Filters[/* withEdge */3];
  var partial_arg$1 = function (param) {
    return partial_arg(edge, param);
  };
  return (function (param) {
      return filterFacts(partial_arg$1, param);
    });
}

var partial_arg$2 = Fact$Reason.Filters[/* withEdge */3];

function partial_arg$3(param) {
  return partial_arg$2(/* SUBJECT */0, param);
}

function isSubjectForFacts(param) {
  return filterFacts(partial_arg$3, param);
}

var partial_arg$4 = Fact$Reason.Filters[/* withEdge */3];

function partial_arg$5(param) {
  return partial_arg$4(/* PROPERTY */1, param);
}

function isPropertyForFacts(param) {
  return filterFacts(partial_arg$5, param);
}

var partial_arg$6 = Fact$Reason.Filters[/* withIdAsAnyEdge */9];

function facts(param) {
  return filterFacts(partial_arg$6, param);
}

function filterFactsAndSelectThings(fromEdge, toEdge, t) {
  var partial_arg = t[/* graph */1];
  var partial_arg$1 = Fact$Reason.Filters[/* withEdge */3];
  return unpackOptionList(List.map((function (param) {
                    return Graph$Reason.findThingFromFact(partial_arg, toEdge, param);
                  }), filterFacts((function (param) {
                        return partial_arg$1(fromEdge, param);
                      }), t)));
}

function connectedPropertyThings(param) {
  return filterFactsAndSelectThings(/* SUBJECT */0, /* PROPERTY */1, param);
}

function connectedSubjectThings(param) {
  return filterFactsAndSelectThings(/* PROPERTY */1, /* SUBJECT */0, param);
}

function connectedPropertyWithId(id, t) {
  return Base$Reason.Thing[/* find */2](id, connectedPropertyThings(t));
}

function connectedSubjectWithId(id, t) {
  return Base$Reason.Thing[/* find */2](id, connectedSubjectThings(t));
}

function propertyValues(propertyId, t) {
  return List.map(Fact$Reason.T[/* value */5], Curry._1(Fact$Reason.Filters[/* withProperty */7](propertyId), isSubjectForFacts(t)));
}

exports.unpackOptionList = unpackOptionList;
exports.allFacts = allFacts;
exports.filterFacts = filterFacts;
exports.isEdgeForFacts = isEdgeForFacts;
exports.isSubjectForFacts = isSubjectForFacts;
exports.isPropertyForFacts = isPropertyForFacts;
exports.facts = facts;
exports.filterFactsAndSelectThings = filterFactsAndSelectThings;
exports.connectedPropertyThings = connectedPropertyThings;
exports.connectedSubjectThings = connectedSubjectThings;
exports.connectedPropertyWithId = connectedPropertyWithId;
exports.connectedSubjectWithId = connectedSubjectWithId;
exports.propertyValues = propertyValues;
/* Base-Reason Not a pure module */
