// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var RList$Rationale = require("rationale/src/RList.js");

function makeThingId(id, baseId, resourceId) {
  return /* record */[
          /* rawId */id,
          /* baseId */baseId,
          /* resourceId */resourceId,
          /* updatedId */undefined,
          /* isExternal */undefined,
          /* thingIdType */undefined
        ];
}

function thingIdKey(e) {
  return /* tuple */[
          e[/* rawId */0],
          e[/* baseId */1],
          e[/* resourceId */2]
        ];
}

function allPrimaryIds(g) {
  return List.flatten(List.map((function (r) {
                    return /* :: */[
                            r[/* thingId */0],
                            /* :: */[
                              r[/* subjectId */1],
                              /* :: */[
                                r[/* propertyId */2],
                                /* [] */0
                              ]
                            ]
                          ];
                  }), g));
}

function findUniqueIds(g) {
  return RList$Rationale.uniqBy(thingIdKey, allPrimaryIds(g));
}

function useUniqueThingIds(g) {
  var uniqueIds = RList$Rationale.uniqBy(thingIdKey, allPrimaryIds(g));
  var findId = function (thingId) {
    return List.find((function (e) {
                  return Caml_obj.caml_equal(thingIdKey(e), thingIdKey(thingId));
                }), uniqueIds);
  };
  return List.map((function (r) {
                return /* record */[
                        /* thingId */findId(r[/* thingId */0]),
                        /* subjectId */findId(r[/* subjectId */1]),
                        /* propertyId */findId(r[/* propertyId */2]),
                        /* value */r[/* value */3]
                      ];
              }), g);
}

function handleThingTypes(g) {
  allPrimaryIds(g);
  var propertyOrSubjectType = function (id) {
    var match = id[/* thingIdType */5];
    if (match !== undefined && !match) {
      return /* FACT */0;
    } else {
      return /* NONFACT */1;
    }
  };
  List.iter((function (r) {
          var id = r[/* thingId */0];
          id[/* thingIdType */5] = /* FACT */0;
          return /* () */0;
        }), g);
  List.iter((function (r) {
          var propertyId = r[/* propertyId */2];
          propertyId[/* thingIdType */5] = propertyOrSubjectType(propertyId);
          var subjectId = r[/* subjectId */1];
          subjectId[/* thingIdType */5] = propertyOrSubjectType(subjectId);
          return /* () */0;
        }), g);
  return g;
}

exports.makeThingId = makeThingId;
exports.thingIdKey = thingIdKey;
exports.allPrimaryIds = allPrimaryIds;
exports.findUniqueIds = findUniqueIds;
exports.useUniqueThingIds = useUniqueThingIds;
exports.handleThingTypes = handleThingTypes;
/* RList-Rationale Not a pure module */
