// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Function$Rationale = require("rationale/src/Function.js");
var Compiler_Run$Reason = require("../../Compiler/Compiler_Run.bs.js");

function valueToArray(value) {
  if (value.tag) {
    return value[0];
  } else {
    return /* array */[value[0]];
  }
}

function flattenValues(g) {
  return $$Array.map((function (r) {
                return /* record */[
                        /* id */r[/* id */0],
                        /* baseId */r[/* baseId */1],
                        /* resourceId */r[/* resourceId */2],
                        /* facts */Belt_Array.concatMany($$Array.map((function (f) {
                                    return $$Array.map((function (value) {
                                                  return /* record */[
                                                          /* id */f[/* id */0],
                                                          /* property */f[/* property */1],
                                                          /* baseId */f[/* baseId */2],
                                                          /* resourceId */f[/* resourceId */3],
                                                          /* value : String */Block.__(0, [value])
                                                        ];
                                                }), valueToArray(f[/* value */4]));
                                  }), r[/* facts */3])),
                        /* templates */r[/* templates */4]
                      ];
              }), g);
}

function shape(g) {
  return $$Array.to_list(Belt_Array.concatMany($$Array.map((function (thing) {
                        return $$Array.map((function (fact) {
                                      var match = fact[/* value */4];
                                      var tmp;
                                      tmp = match.tag ? "ERROR" : match[0];
                                      return /* record */[
                                              /* thingId */Compiler_Run$Reason.makeThingId(fact[/* id */0], fact[/* baseId */2], fact[/* resourceId */3]),
                                              /* subjectId */Compiler_Run$Reason.makeThingId(thing[/* id */0], thing[/* baseId */1], thing[/* resourceId */2]),
                                              /* propertyId */Compiler_Run$Reason.makeThingId(fact[/* property */1], fact[/* baseId */2], fact[/* resourceId */3]),
                                              /* value : String */Block.__(0, [tmp])
                                            ];
                                    }), thing[/* facts */3]);
                      }), g)));
}

var partial_arg = Function$Rationale.Infix[/* ||> */1];

function run(param) {
  return partial_arg(flattenValues, shape, param);
}

exports.valueToArray = valueToArray;
exports.flattenValues = flattenValues;
exports.shape = shape;
exports.run = run;
/* Compiler_Run-Reason Not a pure module */
