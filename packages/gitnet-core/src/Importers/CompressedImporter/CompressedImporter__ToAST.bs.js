// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Function$Rationale = require("rationale/src/Function.js");
var Compiler_Run$Reason = require("../../Compiler/Compiler_Run.bs.js");

function valueToArray(value) {
  if (value.tag) {
    return value[0];
  } else {
    return /* array */[value[0]];
  }
}

function flattenValues(g) {
  return $$Array.map((function ($$package) {
                return /* record */[
                        /* things */$$Array.map((function (r) {
                                return /* record */[
                                        /* id */r[/* id */0],
                                        /* facts */Belt_Array.concatMany($$Array.map((function (f) {
                                                    return $$Array.map((function (value) {
                                                                  return /* record */[
                                                                          /* id */f[/* id */0],
                                                                          /* property */f[/* property */1],
                                                                          /* value : String */Block.__(0, [value])
                                                                        ];
                                                                }), valueToArray(f[/* value */2]));
                                                  }), r[/* facts */1])),
                                        /* templates */r[/* templates */2]
                                      ];
                              }), $$package[/* things */0]),
                        /* baseId */$$package[/* baseId */1],
                        /* resourceId */$$package[/* resourceId */2]
                      ];
              }), g);
}

function shape(g) {
  return $$Array.to_list(Belt_Array.concatMany(Belt_Array.concatMany($$Array.map((function ($$package) {
                            return $$Array.map((function (thing) {
                                          return $$Array.map((function (fact) {
                                                        var match = fact[/* value */2];
                                                        var tmp;
                                                        tmp = match.tag ? "ERROR" : match[0];
                                                        return /* record */[
                                                                /* thingId */Compiler_Run$Reason.makeThingId(fact[/* id */0], $$package[/* baseId */1], $$package[/* baseId */1]),
                                                                /* subjectId */Compiler_Run$Reason.makeThingId(thing[/* id */0], $$package[/* baseId */1], $$package[/* baseId */1]),
                                                                /* propertyId */Compiler_Run$Reason.makeThingId(fact[/* property */1], $$package[/* baseId */1], $$package[/* baseId */1]),
                                                                /* value : String */Block.__(0, [tmp])
                                                              ];
                                                      }), thing[/* facts */1]);
                                        }), $$package[/* things */0]);
                          }), g))));
}

var partial_arg = Function$Rationale.Infix[/* ||> */1];

function run(param) {
  return partial_arg(flattenValues, shape, param);
}

exports.valueToArray = valueToArray;
exports.flattenValues = flattenValues;
exports.shape = shape;
exports.run = run;
/* Compiler_Run-Reason Not a pure module */
