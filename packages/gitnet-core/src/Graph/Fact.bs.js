// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Base$Reason = require("./Base.bs.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var RList$Rationale = require("rationale/src/RList.js");
var Function$Rationale = require("rationale/src/Function.js");

function encodeValue(v) {
  switch (v.tag | 0) {
    case 0 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "dataValue",
                      "thingId"
                    ],
                    /* :: */[
                      /* tuple */[
                        "data",
                        v[0]
                      ],
                      /* [] */0
                    ]
                  ]);
    case 1 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "dataValue",
                      "string"
                    ],
                    /* :: */[
                      /* tuple */[
                        "data",
                        v[0]
                      ],
                      /* [] */0
                    ]
                  ]);
    case 2 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "dataValue",
                      "json"
                    ],
                    /* :: */[
                      /* tuple */[
                        "data",
                        v[0]
                      ],
                      /* [] */0
                    ]
                  ]);
    
  }
}

function decodeValue(v) {
  var _type = Json_decode.field("dataType", Json_decode.string, v);
  switch (_type) {
    case "string" : 
        return /* String */Block.__(1, [Json_decode.field("data", Json_decode.string, v)]);
    case "thingId" : 
        return /* ThingId */Block.__(0, [Json_decode.field("data", Json_decode.string, v)]);
    default:
      return /* ThingId */Block.__(0, [Json_decode.field("data", Json_decode.string, v)]);
  }
}

function subjectId(t) {
  return t[/* subjectId */1];
}

function propertyId(t) {
  return t[/* propertyId */2];
}

function edgeId(edge) {
  var match = edge === /* SUBJECT */0;
  if (match) {
    return subjectId;
  } else {
    return propertyId;
  }
}

var partial_arg = Function$Rationale.Infix[/* ||> */1];

function hasSubjectId(param) {
  return partial_arg(subjectId, Base$Reason.isEqual, param);
}

var partial_arg$1 = Function$Rationale.Infix[/* ||> */1];

function hasPropertyId(param) {
  return partial_arg$1(propertyId, Base$Reason.isEqual, param);
}

function value(t) {
  return t[/* value */3];
}

function id(t) {
  return t[/* id */0];
}

function to_json(t) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "id",
                t[/* id */0]
              ],
              /* :: */[
                /* tuple */[
                  "subjectId",
                  t[/* subjectId */1]
                ],
                /* :: */[
                  /* tuple */[
                    "propertyId",
                    t[/* propertyId */2]
                  ],
                  /* :: */[
                    /* tuple */[
                      "value",
                      encodeValue(t[/* value */3])
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

var T = /* module */[
  /* subjectId */subjectId,
  /* propertyId */propertyId,
  /* edgeId */edgeId,
  /* hasSubjectId */hasSubjectId,
  /* hasPropertyId */hasPropertyId,
  /* value */value,
  /* id */id,
  /* to_json */to_json
];

function run(q, f) {
  var match = q[/* q */2] === /* IS */0;
  var equality;
  if (match) {
    var partial_arg = q[/* id */1];
    equality = (function (param) {
        return Base$Reason.isEqual(partial_arg, param);
      });
  } else {
    var partial_arg$1 = q[/* id */1];
    equality = (function (param) {
        return Base$Reason.isNotEqual(partial_arg$1, param);
      });
  }
  var match$1 = q[/* edge */0];
  if (match$1) {
    return Curry._1(equality, f[/* propertyId */2]);
  } else {
    return Curry._1(equality, f[/* subjectId */1]);
  }
}

function qOr(q1, q2, f) {
  if (run(q1, f)) {
    return true;
  } else {
    return run(q2, f);
  }
}

function qAnd(q1, q2, f) {
  if (run(q1, f)) {
    return run(q2, f);
  } else {
    return false;
  }
}

var Query = /* module */[
  /* run */run,
  /* qOr */qOr,
  /* qAnd */qAnd
];

function query(q, t) {
  return List.filter((function (param) {
                  return run(q, param);
                }))(t);
}

function find(id, t) {
  return RList$Rationale.find((function (e) {
                return e[/* id */0] === id;
              }), t);
}

function withEdge(edge, id) {
  var partial_arg = /* record */[
    /* edge */edge,
    /* id */id,
    /* q : IS */0
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withoutEdge(edge, id) {
  var partial_arg = /* record */[
    /* edge */edge,
    /* id */id,
    /* q : IS_NOT */1
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withSubject(id) {
  var partial_arg = /* record */[
    /* edge : SUBJECT */0,
    /* id */id,
    /* q : IS */0
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withoutSubject(id) {
  var partial_arg = /* record */[
    /* edge : SUBJECT */0,
    /* id */id,
    /* q : IS_NOT */1
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withProperty(id) {
  var partial_arg = /* record */[
    /* edge : PROPERTY */1,
    /* id */id,
    /* q : IS */0
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withoutProperty(id) {
  var partial_arg = /* record */[
    /* edge : PROPERTY */1,
    /* id */id,
    /* q : IS_NOT */1
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withIdAsAnyEdge(id) {
  var partial_arg = /* record */[
    /* edge : PROPERTY */1,
    /* id */id,
    /* q : IS */0
  ];
  var partial_arg$1 = /* record */[
    /* edge : SUBJECT */0,
    /* id */id,
    /* q : IS */0
  ];
  return List.filter((function (param) {
                return qOr(partial_arg$1, partial_arg, param);
              }));
}

function withIdAsNoEdge(id) {
  var partial_arg = /* record */[
    /* edge : PROPERTY */1,
    /* id */id,
    /* q : IS_NOT */1
  ];
  var partial_arg$1 = /* record */[
    /* edge : SUBJECT */0,
    /* id */id,
    /* q : IS_NOT */1
  ];
  return List.filter((function (param) {
                return qOr(partial_arg$1, partial_arg, param);
              }));
}

var Filters = /* module */[
  /* query */query,
  /* find */find,
  /* filter */List.filter,
  /* withEdge */withEdge,
  /* withoutEdge */withoutEdge,
  /* withSubject */withSubject,
  /* withoutSubject */withoutSubject,
  /* withProperty */withProperty,
  /* withoutProperty */withoutProperty,
  /* withIdAsAnyEdge */withIdAsAnyEdge,
  /* withIdAsNoEdge */withIdAsNoEdge
];

exports.encodeValue = encodeValue;
exports.decodeValue = decodeValue;
exports.T = T;
exports.Query = Query;
exports.Filters = Filters;
/* Base-Reason Not a pure module */
