// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Base$Reason = require("./Base.bs.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Config$Reason = require("./Config.bs.js");
var RList$Rationale = require("rationale/src/RList.js");

function to_json(v) {
  switch (v.tag | 0) {
    case 0 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      Config$Reason.FactJson[/* Value */0][/* dataTypeField */0],
                      Config$Reason.FactJson[/* Value */0][/* thingIdType */4]
                    ],
                    /* :: */[
                      /* tuple */[
                        Config$Reason.FactJson[/* Value */0][/* dataField */1],
                        v[0]
                      ],
                      /* [] */0
                    ]
                  ]);
    case 1 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      Config$Reason.FactJson[/* Value */0][/* dataTypeField */0],
                      Config$Reason.FactJson[/* Value */0][/* stringType */3]
                    ],
                    /* :: */[
                      /* tuple */[
                        Config$Reason.FactJson[/* Value */0][/* dataField */1],
                        v[0]
                      ],
                      /* [] */0
                    ]
                  ]);
    case 2 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      Config$Reason.FactJson[/* Value */0][/* dataTypeField */0],
                      Config$Reason.FactJson[/* Value */0][/* jsonType */2]
                    ],
                    /* :: */[
                      /* tuple */[
                        Config$Reason.FactJson[/* Value */0][/* dataField */1],
                        v[0]
                      ],
                      /* [] */0
                    ]
                  ]);
    
  }
}

function from_json(v) {
  var _type = Json_decode.field(Config$Reason.FactJson[/* Value */0][/* dataTypeField */0], Json_decode.string, v);
  switch (_type) {
    case "string" : 
        return /* String */Block.__(1, [Json_decode.field(Config$Reason.FactJson[/* Value */0][/* dataField */1], Json_decode.string, v)]);
    case "thingId" : 
        return /* ThingId */Block.__(0, [Json_decode.field(Config$Reason.FactJson[/* Value */0][/* dataField */1], Json_decode.string, v)]);
    default:
      return /* ThingId */Block.__(0, [Json_decode.field(Config$Reason.FactJson[/* Value */0][/* dataField */1], Json_decode.string, v)]);
  }
}

var Value = /* module */[
  /* to_json */to_json,
  /* from_json */from_json
];

function subjectId(t) {
  return t[/* subjectId */1];
}

function propertyId(t) {
  return t[/* propertyId */2];
}

function edgeId(edge) {
  var match = edge === /* SUBJECT */0;
  if (match) {
    return subjectId;
  } else {
    return propertyId;
  }
}

function value(t) {
  return t[/* value */3];
}

function id(t) {
  return t[/* id */0];
}

function to_json$1(t) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                Config$Reason.FactJson[/* Fields */1][/* id */0],
                t[/* id */0]
              ],
              /* :: */[
                /* tuple */[
                  Config$Reason.FactJson[/* Fields */1][/* subjectId */1],
                  t[/* subjectId */1]
                ],
                /* :: */[
                  /* tuple */[
                    Config$Reason.FactJson[/* Fields */1][/* propertyId */2],
                    t[/* propertyId */2]
                  ],
                  /* :: */[
                    /* tuple */[
                      Config$Reason.FactJson[/* Fields */1][/* value */3],
                      to_json(t[/* value */3])
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

function from_json$1(t) {
  return /* record */[
          /* id */Json_decode.field(Config$Reason.FactJson[/* Fields */1][/* id */0], Json_decode.string, t),
          /* subjectId */Json_decode.field(Config$Reason.FactJson[/* Fields */1][/* subjectId */1], Json_decode.string, t),
          /* propertyId */Json_decode.field(Config$Reason.FactJson[/* Fields */1][/* propertyId */2], Json_decode.string, t),
          /* value */Json_decode.field(Config$Reason.FactJson[/* Fields */1][/* value */3], from_json, t)
        ];
}

var T = /* module */[
  /* subjectId */subjectId,
  /* propertyId */propertyId,
  /* edgeId */edgeId,
  /* value */value,
  /* id */id,
  /* to_json */to_json$1,
  /* from_json */from_json$1
];

function run(q, f) {
  var match = q[/* q */2] === /* IS */0;
  var equality;
  if (match) {
    var partial_arg = q[/* id */1];
    equality = (function (param) {
        return Base$Reason.isEqual(partial_arg, param);
      });
  } else {
    var partial_arg$1 = q[/* id */1];
    equality = (function (param) {
        return Base$Reason.isNotEqual(partial_arg$1, param);
      });
  }
  var match$1 = q[/* edge */0];
  switch (match$1) {
    case 0 : 
        return Curry._1(equality, f[/* subjectId */1]);
    case 1 : 
        return Curry._1(equality, f[/* propertyId */2]);
    case 2 : 
        var match$2 = f[/* value */3];
        switch (match$2.tag | 0) {
          case 0 : 
              return Curry._1(equality, match$2[0]);
          case 1 : 
          case 2 : 
              return q[/* q */2] !== /* IS */0;
          
        }
    
  }
}

function qOr(qs, f) {
  return List.exists((function (q) {
                return run(q, f);
              }), qs);
}

function qAnd(qs, f) {
  return List.for_all((function (q) {
                return run(q, f);
              }), qs);
}

function item_from_json(i) {
  var id = Json_decode.field("id", Json_decode.string, i);
  var _q = Json_decode.field("q", Json_decode.string, i);
  var _edge = Json_decode.field("edge", Json_decode.string, i);
  var tmp;
  switch (_edge) {
    case "PROPERTY" : 
        tmp = /* PROPERTY */1;
        break;
    case "VALUE" : 
        tmp = /* VALUE */2;
        break;
    default:
      tmp = /* SUBJECT */0;
  }
  var tmp$1 = _q === "IS_NOT" ? /* IS_NOT */1 : /* IS */0;
  return /* record */[
          /* edge */tmp,
          /* id */id,
          /* q */tmp$1
        ];
}

var fromJson = item_from_json;

var Query = /* module */[
  /* run */run,
  /* qOr */qOr,
  /* qAnd */qAnd,
  /* item_from_json */item_from_json,
  /* fromJson */fromJson
];

function query(q, t) {
  return List.filter((function (param) {
                  return run(q, param);
                }))(t);
}

function find(id, t) {
  return RList$Rationale.find((function (e) {
                return e[/* id */0] === id;
              }), t);
}

function withQuery(query) {
  return List.filter((function (param) {
                return run(query, param);
              }));
}

function withEdge(edge, id) {
  var partial_arg = /* record */[
    /* edge */edge,
    /* id */id,
    /* q : IS */0
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withoutEdge(edge, id) {
  var partial_arg = /* record */[
    /* edge */edge,
    /* id */id,
    /* q : IS_NOT */1
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withSubject(id) {
  var partial_arg = /* record */[
    /* edge : SUBJECT */0,
    /* id */id,
    /* q : IS */0
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withoutSubject(id) {
  var partial_arg = /* record */[
    /* edge : SUBJECT */0,
    /* id */id,
    /* q : IS_NOT */1
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withProperty(id) {
  var partial_arg = /* record */[
    /* edge : PROPERTY */1,
    /* id */id,
    /* q : IS */0
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withoutProperty(id) {
  var partial_arg = /* record */[
    /* edge : PROPERTY */1,
    /* id */id,
    /* q : IS_NOT */1
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withValue(id) {
  var partial_arg = /* record */[
    /* edge : VALUE */2,
    /* id */id,
    /* q : IS */0
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withoutValue(id) {
  var partial_arg = /* record */[
    /* edge : VALUE */2,
    /* id */id,
    /* q : IS_NOT */1
  ];
  return List.filter((function (param) {
                return run(partial_arg, param);
              }));
}

function withIdAsAnyEdge(id) {
  var partial_arg_000 = /* record */[
    /* edge : SUBJECT */0,
    /* id */id,
    /* q : IS */0
  ];
  var partial_arg_001 = /* :: */[
    /* record */[
      /* edge : PROPERTY */1,
      /* id */id,
      /* q : IS */0
    ],
    /* :: */[
      /* record */[
        /* edge : VALUE */2,
        /* id */id,
        /* q : IS */0
      ],
      /* [] */0
    ]
  ];
  var partial_arg = /* :: */[
    partial_arg_000,
    partial_arg_001
  ];
  return List.filter((function (param) {
                return qOr(partial_arg, param);
              }));
}

function withIdAsNoEdge(id) {
  var partial_arg_000 = /* record */[
    /* edge : SUBJECT */0,
    /* id */id,
    /* q : IS_NOT */1
  ];
  var partial_arg_001 = /* :: */[
    /* record */[
      /* edge : PROPERTY */1,
      /* id */id,
      /* q : IS_NOT */1
    ],
    /* :: */[
      /* record */[
        /* edge : VALUE */2,
        /* id */id,
        /* q : IS_NOT */1
      ],
      /* [] */0
    ]
  ];
  var partial_arg = /* :: */[
    partial_arg_000,
    partial_arg_001
  ];
  return List.filter((function (param) {
                return qAnd(partial_arg, param);
              }));
}

var Filters = /* module */[
  /* query */query,
  /* find */find,
  /* filter */List.filter,
  /* withQuery */withQuery,
  /* withEdge */withEdge,
  /* withoutEdge */withoutEdge,
  /* withSubject */withSubject,
  /* withoutSubject */withoutSubject,
  /* withProperty */withProperty,
  /* withoutProperty */withoutProperty,
  /* withValue */withValue,
  /* withoutValue */withoutValue,
  /* withIdAsAnyEdge */withIdAsAnyEdge,
  /* withIdAsNoEdge */withIdAsNoEdge
];

function c(param) {
  return /* record */[
          /* a */"sdf",
          /* b */"sdfsdf"
        ];
}

exports.Value = Value;
exports.T = T;
exports.Query = Query;
exports.Filters = Filters;
exports.c = c;
/* Base-Reason Not a pure module */
