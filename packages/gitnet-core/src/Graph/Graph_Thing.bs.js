// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Graph_T$Reason = require("./Graph_T.bs.js");
var Option$Rationale = require("rationale/src/Option.js");
var Function$Rationale = require("rationale/src/Function.js");
var Graph_Graph$Reason = require("./Graph_Graph.bs.js");
var Graph_Fact_Filters$Reason = require("./Graph_Fact_Filters.bs.js");

function findFromList(id, t) {
  return List.find((function (e) {
                return e[/* thingId */0][/* thingIdString */0] === id;
              }), t);
}

function unpackOptionList(e) {
  return List.map((function (param) {
                return Option$Rationale.toExn("mistake", param);
              }), List.filter(Option$Rationale.isSome)(e));
}

function allFacts(g) {
  return g[/* facts */1];
}

var partial_arg = Function$Rationale.Infix[/* ||> */1];

function partial_arg$1(param) {
  return partial_arg(allFacts, Js_dict.values, param);
}

var partial_arg$2 = Function$Rationale.Infix[/* ||> */1];

function allFactsList(param) {
  return partial_arg$2(partial_arg$1, $$Array.to_list, param);
}

function filterFacts(g, f, t) {
  return Curry._2(f, Graph_T$Reason.Thing[/* id */0](t), allFactsList(g));
}

function facts(g) {
  return (function (param) {
      return filterFacts(g, Graph_Fact_Filters$Reason.withIdAsAnyEdge, param);
    });
}

function isEdgeForFacts(g, edge) {
  return (function (param) {
      return filterFacts(g, (function (param) {
                    return Graph_Fact_Filters$Reason.withEdge(edge, param);
                  }), param);
    });
}

function filterFactsAndSelectThings(g, fromEdge, toEdge, t) {
  return unpackOptionList(List.map((function (param) {
                    return Graph_Graph$Reason.findThingFromFact(g, toEdge, param);
                  }), filterFacts(g, (function (param) {
                        return Graph_Fact_Filters$Reason.withEdge(fromEdge, param);
                      }), t)));
}

function connectedPropertyThings(g) {
  return (function (param) {
      return filterFactsAndSelectThings(g, /* SUBJECT */0, /* PROPERTY */1, param);
    });
}

function connectedSubjectThings(g) {
  return (function (param) {
      return filterFactsAndSelectThings(g, /* PROPERTY */1, /* SUBJECT */0, param);
    });
}

function connectedPropertyWithId(g, id, t) {
  return findFromList(id, filterFactsAndSelectThings(g, /* SUBJECT */0, /* PROPERTY */1, t));
}

function connectedSubjectWithId(g, id, t) {
  return findFromList(id, filterFactsAndSelectThings(g, /* PROPERTY */1, /* SUBJECT */0, t));
}

exports.findFromList = findFromList;
exports.unpackOptionList = unpackOptionList;
exports.allFacts = allFacts;
exports.allFactsList = allFactsList;
exports.filterFacts = filterFacts;
exports.facts = facts;
exports.isEdgeForFacts = isEdgeForFacts;
exports.filterFactsAndSelectThings = filterFactsAndSelectThings;
exports.connectedPropertyThings = connectedPropertyThings;
exports.connectedSubjectThings = connectedSubjectThings;
exports.connectedPropertyWithId = connectedPropertyWithId;
exports.connectedSubjectWithId = connectedSubjectWithId;
/* Option-Rationale Not a pure module */
