// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Base$Reason = require("./Base.bs.js");
var Fact$Reason = require("./Fact.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var RList$Rationale = require("rationale/src/RList.js");
var Function$Rationale = require("rationale/src/Function.js");

function build(fs) {
  var nodes = RList$Rationale.uniq(List.flatten(List.map((function (param) {
                  return /* :: */[
                          param[0],
                          /* :: */[
                            param[1],
                            /* :: */[
                              param[2],
                              /* [] */0
                            ]
                          ]
                        ];
                }), fs)));
  var things = List.map((function (e) {
          return /* record */[
                  /* id */e,
                  /* graph : record */[
                    /* facts : [] */0,
                    /* things : [] */0
                  ]
                ];
        }), nodes);
  var facts = List.map((function (param) {
          return /* record */[
                  /* id */param[0],
                  /* subjectId */param[1],
                  /* propertyId */param[2],
                  /* value : String */Block.__(1, ["sdfs"])
                ];
        }), fs);
  var graph = /* record */[
    /* facts */facts,
    /* things */things
  ];
  for(var x = 0 ,x_finish = List.length(things) - 1 | 0; x <= x_finish; ++x){
    List.nth(things, x)[/* graph */1] = graph;
  }
  return graph;
}

var testData = /* array */[
  /* tuple */[
    "g-0",
    "n-george",
    "p-name",
    "George"
  ],
  /* tuple */[
    "g-1",
    "n-george",
    "p-description",
    "The person named Goerge"
  ],
  /* tuple */[
    "1",
    "n-cindy",
    "p-name",
    "Cindy"
  ],
  /* tuple */[
    "2",
    "p-name",
    "p-name",
    "Name of Item"
  ],
  /* tuple */[
    "3",
    "p-name",
    "p-description",
    "The name of something"
  ],
  /* tuple */[
    "4",
    "2",
    "p-name",
    "The 2nd fact"
  ]
];

var start = build($$Array.to_list(testData));

function things(g) {
  return g[/* things */1];
}

function facts(g) {
  return g[/* facts */0];
}

function findFact(id) {
  var partial_arg = Fact$Reason.Filters[/* find */1];
  var partial_arg$1 = function (param) {
    return partial_arg(id, param);
  };
  var partial_arg$2 = Function$Rationale.Infix[/* ||> */1];
  return (function (param) {
      return partial_arg$2(facts, partial_arg$1, param);
    });
}

function findThing(id) {
  var partial_arg = Base$Reason.Thing[/* find */2];
  var partial_arg$1 = function (param) {
    return partial_arg(id, param);
  };
  var partial_arg$2 = Function$Rationale.Infix[/* ||> */1];
  return (function (param) {
      return partial_arg$2(things, partial_arg$1, param);
    });
}

function findThingFromFact(g, edge, f) {
  return findThing(Fact$Reason.T[/* edgeId */2](edge)(f))(g);
}

function to_json(t) {
  var facts = $$Array.map(Fact$Reason.T[/* to_json */7], $$Array.of_list(t[/* facts */0]));
  var things = $$Array.map(Base$Reason.Thing[/* to_json */4], $$Array.of_list(t[/* things */1]));
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "facts",
                facts
              ],
              /* :: */[
                /* tuple */[
                  "things",
                  things
                ],
                /* [] */0
              ]
            ]);
}

exports.build = build;
exports.testData = testData;
exports.start = start;
exports.things = things;
exports.facts = facts;
exports.findFact = findFact;
exports.findThing = findThing;
exports.findThingFromFact = findThingFromFact;
exports.to_json = to_json;
/* start Not a pure module */
