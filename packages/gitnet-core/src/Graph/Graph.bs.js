// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/src/Json.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Base$Reason = require("./Base.bs.js");
var Fact$Reason = require("./Fact.bs.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var RList$Rationale = require("rationale/src/RList.js");
var Function$Rationale = require("rationale/src/Function.js");

function build(facts) {
  var nodes = RList$Rationale.uniq(List.flatten(List.map((function (e) {
                  return /* :: */[
                          e[/* id */0],
                          /* :: */[
                            e[/* subjectId */1],
                            /* :: */[
                              e[/* propertyId */2],
                              /* [] */0
                            ]
                          ]
                        ];
                }), facts)));
  var things = List.map((function (e) {
          return /* record */[
                  /* id */e,
                  /* graph : record */[
                    /* facts : [] */0,
                    /* things : [] */0
                  ]
                ];
        }), nodes);
  var graph = /* record */[
    /* facts */facts,
    /* things */things
  ];
  for(var x = 0 ,x_finish = List.length(things) - 1 | 0; x <= x_finish; ++x){
    List.nth(things, x)[/* graph */1] = graph;
  }
  return graph;
}

var textValue2 = Json.parseOrRaise("\n[{\n        \"id\": \"g-1\",\n        \"subject\": \"n-george\",\n        \"property\": \"p-name\",\n        \"value\": {\n            \"dataValue\": \"string\",\n            \"data\": \"George\"\n        }\n    },\n    {\n        \"id\": \"g-2\",\n        \"subject\": \"n-george\",\n        \"property\": \"p-description\",\n        \"value\": {\n            \"dataValue\": \"string\",\n            \"data\": \"A test person!\"\n        }\n    },\n    {\n        \"id\": \"p-name-name\",\n        \"subject\": \"n-name\",\n        \"property\": \"n-name\",\n        \"value\": {\n            \"dataValue\": \"string\",\n            \"data\": \"Name\"\n        }\n    }\n]\n       ");

var partial_arg = Base$Reason.Thing[/* decode */5];

function decode(param) {
  return Json_decode.list(partial_arg, param);
}

var start = build(decode(textValue2));

function things(g) {
  return g[/* things */1];
}

function facts(g) {
  return g[/* facts */0];
}

function findFact(id) {
  var partial_arg = Fact$Reason.Filters[/* find */1];
  var partial_arg$1 = function (param) {
    return partial_arg(id, param);
  };
  var partial_arg$2 = Function$Rationale.Infix[/* ||> */1];
  return (function (param) {
      return partial_arg$2(facts, partial_arg$1, param);
    });
}

function findThing(id) {
  var partial_arg = Base$Reason.Thing[/* find */2];
  var partial_arg$1 = function (param) {
    return partial_arg(id, param);
  };
  var partial_arg$2 = Function$Rationale.Infix[/* ||> */1];
  return (function (param) {
      return partial_arg$2(things, partial_arg$1, param);
    });
}

function findThingFromFact(g, edge, f) {
  return findThing(Fact$Reason.T[/* edgeId */2](edge)(f))(g);
}

function to_json(t) {
  var facts = $$Array.map(Fact$Reason.T[/* to_json */7], $$Array.of_list(t[/* facts */0]));
  var things = $$Array.map(Base$Reason.Thing[/* to_json */4], $$Array.of_list(t[/* things */1]));
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "facts",
                facts
              ],
              /* :: */[
                /* tuple */[
                  "things",
                  things
                ],
                /* [] */0
              ]
            ]);
}

exports.build = build;
exports.textValue2 = textValue2;
exports.decode = decode;
exports.start = start;
exports.things = things;
exports.facts = facts;
exports.findFact = findFact;
exports.findThing = findThing;
exports.findThingFromFact = findThingFromFact;
exports.to_json = to_json;
/* textValue2 Not a pure module */
