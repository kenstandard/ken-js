// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Json = require("@glennsl/bs-json/src/Json.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Graph$Reason = require("../src/Graph/Graph.bs.js");
var Option$Rationale = require("rationale/src/Option.js");
var SecureRandomString = require("@ncthbrt/re-secure-random-string/src/SecureRandomString.bs.js");
var JsonToUnprocessed$Reason = require("../src/Converters/JsonToUnprocessed.bs.js");

function toGraph(things) {
  var valueToValues = function (value) {
    if (value.tag) {
      return value[0];
    } else {
      return /* array */[value[0]];
    }
  };
  return Graph$Reason.from_facts($$Array.to_list(Belt_Array.concatMany(Belt_Array.concatMany($$Array.of_list(List.map((function (thing) {
                                    return $$Array.map((function (fact) {
                                                  return $$Array.map((function (value) {
                                                                var match = Option$Rationale.isSome(fact[/* id */0]);
                                                                return /* record */[
                                                                        /* id */Option$Rationale.$$default(SecureRandomString.genSync(8, true, /* () */0), fact[/* id */0]),
                                                                        /* subjectId */thing[/* id */0],
                                                                        /* propertyId */fact[/* property */1],
                                                                        /* value : String */Block.__(1, [value]),
                                                                        /* idIsPublic */match ? true : false,
                                                                        /* baseId */fact[/* baseId */2],
                                                                        /* resourceId */fact[/* resourceId */3]
                                                                      ];
                                                              }), valueToValues(fact[/* value */4]));
                                                }), thing[/* facts */3]);
                                  }), $$Array.to_list(things)))))));
}

var value = Json.parseOrRaise("\n      [\n        {\n        \"baseId\": \"base12\",\n        \"resourceId\": \"2/1\",\n        \"n-fred\": {\n          \"p-name\": \"Fred\",\n          \"p-test\": [\"sdf\", \"sdfsdf\", \"sdfsdf\"],\n          \"p-description\": {\"id\": \"sdf\", \"value\": \"sdffsd\"}\n        }\n      },\n      {\n        \"baseId\": \"base12\",\n        \"resourceId\": \"2/2\",\n        \"n-george\": {\n          \"p-name\": \"George\",\n          \"p-friend\": \"n-jeremy\",\n          \"p-test\": [\"sdf\", \"sdfsdf\", \"sdfsdf\"],\n          \"p-description\": {\"id\": \"sdf\", \"value\": \"sdffsd\"}\n        },\n        \"n-jeremy\": {\n          \"p-name\": \"George\",\n          \"p-test\": [\"sdf\", \"sdfsdf\", \"sdfsdf\"],\n          \"p-description\": {\"id\": \"sdf\", \"value\": \"sdffsd\"}\n        }\n      }]\n   ");

describe("#to_json", (function () {
        return Jest.test("works", (function (param) {
                      var foo = Graph$Reason.to_json(toGraph(JsonToUnprocessed$Reason.run(value)));
                      console.log(foo);
                      return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](true));
                    }));
      }));

exports.toGraph = toGraph;
exports.value = value;
/* value Not a pure module */
