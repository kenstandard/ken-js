// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Json = require("@glennsl/bs-json/src/Json.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Graph$Reason = require("../src/Graph/Graph.bs.js");
var RList$Rationale = require("rationale/src/RList.js");
var Option$Rationale = require("rationale/src/Option.js");

function factDecoder(p, json) {
  var match = Js_json.classify(json);
  if (typeof match === "number") {
    return /* record */[
            /* id */undefined,
            /* p */p,
            /* v : String */Block.__(0, ["Couldn't find"])
          ];
  } else {
    switch (match.tag | 0) {
      case 0 : 
          return /* record */[
                  /* id */undefined,
                  /* p */p,
                  /* v : String */Block.__(0, [Json_decode.string(json)])
                ];
      case 2 : 
          return /* record */[
                  /* id */"sddf",
                  /* p */p,
                  /* v : String */Block.__(0, [Json_decode.field("value", Json_decode.string, json)])
                ];
      case 3 : 
          return /* record */[
                  /* id */undefined,
                  /* p */p,
                  /* v : Array */Block.__(1, [$$Array.map(Json_decode.string, match[0])])
                ];
      default:
        return /* record */[
                /* id */undefined,
                /* p */p,
                /* v : String */Block.__(0, ["Couldn't find"])
              ];
    }
  }
}

function propertyDecoder(json) {
  var thing0 = Option$Rationale.toExn("Parse Error", Js_json.decodeObject(json));
  var toFact = function (id) {
    var _value = Option$Rationale.toExn("Parse Error", Js_dict.get(thing0, id));
    return factDecoder(id, _value);
  };
  var nonTemplateKeys = $$Array.of_list(RList$Rationale.without(/* :: */[
            "templates",
            /* [] */0
          ], $$Array.to_list(Object.keys(thing0))));
  return $$Array.map(toFact, nonTemplateKeys);
}

function decode(json) {
  var dict = Option$Rationale.toExn("Parse Error", Js_json.decodeObject(json));
  return $$Array.map((function (param) {
                return /* record */[
                        /* id */param[0],
                        /* facts */propertyDecoder(param[1]),
                        /* templates : array */[]
                      ];
              }), Js_dict.entries(dict));
}

var Importer1 = /* module */[
  /* factDecoder */factDecoder,
  /* propertyDecoder */propertyDecoder,
  /* decode */decode
];

function toFacts(ts) {
  var valueToValues = function (v) {
    if (v.tag) {
      return v[0];
    } else {
      return /* array */[v[0]];
    }
  };
  return Belt_Array.concatMany(Belt_Array.concatMany($$Array.map((function (thing) {
                        return $$Array.map((function (fact) {
                                      return $$Array.map((function (value) {
                                                    return /* record */[
                                                            /* id */Option$Rationale.$$default("null-id", fact[/* id */0]),
                                                            /* subjectId */thing[/* id */0],
                                                            /* propertyId */fact[/* p */1],
                                                            /* value : String */Block.__(1, [value]),
                                                            /* idIsPublic */false
                                                          ];
                                                  }), valueToValues(fact[/* v */2]));
                                    }), thing[/* facts */1]);
                      }), ts)));
}

var value = Json.parseOrRaise("\n      {\"foobar\": {\n        \"p-name\": \"Fred\",\n        \"p-test\": [\"sdf\", \"sdfsdf\", \"sdfsdf\"],\n        \"p-description\": {\"id\": \"sdf\", \"value\": \"sdffsd\"}\n      }\n    }\n   ");

describe("#to_json", (function () {
        return Jest.test("works", (function (param) {
                      var foo = Graph$Reason.to_json(Graph$Reason.from_facts($$Array.to_list(toFacts(decode(value)))));
                      console.log("SUCCSS");
                      console.log(foo);
                      return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](true));
                    }));
      }));

exports.Importer1 = Importer1;
exports.toFacts = toFacts;
exports.value = value;
/* value Not a pure module */
