// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var List = require("bs-platform/lib/js/list.js");
var Base$Reason = require("../src/Base.bs.js");
var Graph$Reason = require("../src/Graph.bs.js");
var ThingG$Reason = require("../src/ThingG.bs.js");
var Option$Rationale = require("rationale/src/Option.js");

var testData = /* :: */[
  /* tuple */[
    "g-0",
    "n-george",
    "p-name",
    "George"
  ],
  /* :: */[
    /* tuple */[
      "g-1",
      "n-george",
      "p-description",
      "The person named Goerge"
    ],
    /* :: */[
      /* tuple */[
        "1",
        "n-cindy",
        "p-name",
        "Cindy"
      ],
      /* :: */[
        /* tuple */[
          "2",
          "p-name",
          "p-name",
          "Name of Item"
        ],
        /* :: */[
          /* tuple */[
            "3",
            "p-name",
            "p-description",
            "The name of something"
          ],
          /* :: */[
            /* tuple */[
              "4",
              "2",
              "p-name",
              "The 2nd fact"
            ],
            /* [] */0
          ]
        ]
      ]
    ]
  ]
];

var graph = Graph$Reason.build(testData);

function item(id) {
  return Option$Rationale.toExn("", Graph$Reason.findThing(id)(graph));
}

describe("#isSubjectForFacts", (function () {
        Jest.test("finds correct facts for George", (function (param) {
                return Jest.Expect[/* toEqual */12](2, Jest.Expect[/* expect */0](List.length(ThingG$Reason.isSubjectForFacts(item("n-george")))));
              }));
        return Jest.test("finds correct facts for fact 2", (function (param) {
                      return Jest.Expect[/* toEqual */12](1, Jest.Expect[/* expect */0](List.length(ThingG$Reason.isSubjectForFacts(item("2")))));
                    }));
      }));

describe("#connectedPropertyThings", (function () {
        return Jest.test("finds correct properties for George", (function (param) {
                      return Jest.Expect[/* toEqual */12](/* :: */[
                                  "p-name",
                                  /* :: */[
                                    "p-description",
                                    /* [] */0
                                  ]
                                ], Jest.Expect[/* expect */0](List.map(Base$Reason.Thing[/* id */0], ThingG$Reason.connectedPropertyThings(item("n-george")))));
                    }));
      }));

describe("#connectedPropertyWithId", (function () {
        return Jest.test("finds correct property for name of George", (function (param) {
                      return Jest.Expect[/* toEqual */12]("p-name", Jest.Expect[/* expect */0](Base$Reason.Thing[/* id */0](Option$Rationale.toExn("", ThingG$Reason.connectedPropertyWithId("p-name", item("n-george"))))));
                    }));
      }));

describe("#propertyValues", (function () {
        return Jest.test("finds correct name for George", (function (param) {
                      return Jest.Expect[/* toEqual */12](/* :: */[
                                  "George",
                                  /* [] */0
                                ], Jest.Expect[/* expect */0](ThingG$Reason.propertyValues("p-name", item("n-george"))));
                    }));
      }));

exports.testData = testData;
exports.graph = graph;
exports.item = item;
/* graph Not a pure module */
