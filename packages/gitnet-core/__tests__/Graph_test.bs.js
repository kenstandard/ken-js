// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Base$Reason = require("../src/Base.bs.js");
var Graph$Reason = require("../src/Graph.bs.js");
var Option$Rationale = require("rationale/src/Option.js");

var testData = /* :: */[
  /* tuple */[
    "0",
    "n-george",
    "p-name",
    "George"
  ],
  /* :: */[
    /* tuple */[
      "1",
      "n-cindy",
      "p-name",
      "Cindy"
    ],
    /* :: */[
      /* tuple */[
        "2",
        "p-name",
        "p-name",
        "Name of Item"
      ],
      /* [] */0
    ]
  ]
];

var graph = Graph$Reason.build(testData);

describe("#build", (function () {
        Jest.test("creates correct number of things", (function (param) {
                return Jest.Expect[/* toEqual */12](6, Jest.Expect[/* expect */0](List.length(Graph$Reason.things(graph))));
              }));
        return Jest.test("creates correct number of facts", (function (param) {
                      return Jest.Expect[/* toEqual */12](3, Jest.Expect[/* expect */0](List.length(Graph$Reason.facts(graph))));
                    }));
      }));

describe("#findFact", (function () {
        return Jest.test("finds correct fact", (function (param) {
                      var fact = Graph$Reason.findFact("0")(graph);
                      return Jest.Expect[/* toEqual */12](/* record */[
                                  /* id */"0",
                                  /* subjectId */"n-george",
                                  /* propertyId */"p-name",
                                  /* value */"George"
                                ], Jest.Expect[/* expect */0](fact));
                    }));
      }));

describe("#findThing", (function () {
        return Jest.test("finds correct thing", (function (param) {
                      var id = Curry._2(Option$Rationale.fmap, Base$Reason.Thing[/* id */0], Graph$Reason.findThing("n-george")(graph));
                      return Jest.Expect[/* toEqual */12]("n-george", Jest.Expect[/* expect */0](id));
                    }));
      }));

exports.testData = testData;
exports.graph = graph;
/* graph Not a pure module */
