// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Compiler_Run$BsKen = require("../../Compiler/Compiler_Run.bs.js");
var Function$Rationale = require("rationale/src/Function.js");
var SimpleFactList_T$BsKen = require("../../AlternativeGraphFormats/SimpleFactList_T.bs.js");

function valueToArray(value) {
  if (value.tag) {
    return value[0];
  } else {
    return /* array */[value[0]];
  }
}

function flattenValues(g) {
  return $$Array.map((function ($$package) {
                return {
                        things: $$Array.map((function (r) {
                                return {
                                        id: r.id,
                                        facts: Belt_Array.concatMany($$Array.map((function (f) {
                                                    return $$Array.map((function (value) {
                                                                  return {
                                                                          id: f.id,
                                                                          property: f.property,
                                                                          isInversed: f.isInversed,
                                                                          value: /* String */Block.__(0, [value])
                                                                        };
                                                                }), valueToArray(f.value));
                                                  }), r.facts))
                                      };
                              }), $$package.things),
                        baseId: $$package.baseId,
                        resourceId: $$package.resourceId,
                        aliases: $$package.aliases
                      };
              }), g);
}

function allPackageFacts(p) {
  return $$Array.to_list(Belt_Array.concatMany($$Array.map((function (thing) {
                        return $$Array.map((function (fact) {
                                      var match = fact.value;
                                      var tmp;
                                      tmp = match.tag ? "ERROR" : match[0];
                                      return {
                                              thingId: Compiler_Run$BsKen.makeThingId(fact.id),
                                              subjectId: Compiler_Run$BsKen.makeThingId(thing.id),
                                              propertyId: Compiler_Run$BsKen.makeThingId(fact.property),
                                              isInversed: fact.isInversed,
                                              value: /* String */Block.__(0, [tmp])
                                            };
                                    }), thing.facts);
                      }), p.things)));
}

function formattedAliases(d) {
  return Js_dict.fromArray($$Array.map((function (param) {
                    var v = param[1];
                    return /* tuple */[
                            param[0],
                            {
                              rawId: v,
                              tag: undefined,
                              thingIdType: /* NONFACT */1,
                              updatedId: v
                            }
                          ];
                  }), Js_dict.entries(d)));
}

function shape(g) {
  return $$Array.to_list($$Array.map((function ($$package) {
                    return {
                            facts: allPackageFacts($$package),
                            baseId: $$package.baseId,
                            resourceId: $$package.resourceId,
                            aliases: formattedAliases($$package.aliases)
                          };
                  }), g));
}

function combinePackages(packages) {
  return SimpleFactList_T$BsKen.combine(List.map((function (param) {
                    return Function$Rationale.Infix.$pipe$pipe$great(Compiler_Run$BsKen.run, Compiler_Run$BsKen.toSimple, param);
                  }), packages));
}

function run(param) {
  return Function$Rationale.Infix.$pipe$pipe$great((function (param) {
                return Function$Rationale.Infix.$pipe$pipe$great(flattenValues, shape, param);
              }), combinePackages, param);
}

exports.valueToArray = valueToArray;
exports.flattenValues = flattenValues;
exports.allPackageFacts = allPackageFacts;
exports.formattedAliases = formattedAliases;
exports.shape = shape;
exports.combinePackages = combinePackages;
exports.run = run;
/* Compiler_Run-BsKen Not a pure module */
