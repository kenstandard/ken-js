// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Graph_T$BsKen = require("./Graph_T.bs.js");
var Option$Rationale = require("rationale/src/Option.js");
var Graph_Graph$BsKen = require("./Graph_Graph.bs.js");
var Graph_Fact_Filters$BsKen = require("./Graph_Fact_Filters.bs.js");

function init(g, t) {
  return {
          graph: g,
          list: Graph_T$BsKen.F.factList(g),
          thing: t
        };
}

function findFromList(id, t) {
  return List.find((function (e) {
                return e.thingId.thingIdString === id;
              }), t);
}

function unpackOptionList(e) {
  return List.map((function (param) {
                return Option$Rationale.toExn("mistake", param);
              }), List.filter(Option$Rationale.isSome)(e));
}

function filterFacts(filter, t) {
  return {
          graph: t.graph,
          list: Curry._2(filter, Graph_T$BsKen.Thing.id(t.thing), t.list),
          thing: t.thing
        };
}

function facts(param) {
  return filterFacts(Graph_Fact_Filters$BsKen.withIdAsAnyEdge, param);
}

function isEdgeForFacts(edge) {
  return (function (param) {
      return filterFacts((function (param) {
                    return Graph_Fact_Filters$BsKen.withEdge(edge, param);
                  }), param);
    });
}

function filterFactsAndSelectThings(fromEdge, toEdge, t) {
  var partial_arg = t.graph;
  return unpackOptionList(List.map((function (param) {
                    return Graph_Graph$BsKen.findThingFromFact(partial_arg, toEdge, param);
                  }), filterFacts((function (param) {
                        return Graph_Fact_Filters$BsKen.withEdge(fromEdge, param);
                      }), t).list));
}

function connectedPropertyThings(param) {
  return filterFactsAndSelectThings(/* SUBJECT */0, /* PROPERTY */1, param);
}

function connectedSubjectThings(param) {
  return filterFactsAndSelectThings(/* PROPERTY */1, /* SUBJECT */0, param);
}

function connectedPropertyWithId(id, t) {
  return findFromList(id, filterFactsAndSelectThings(/* SUBJECT */0, /* PROPERTY */1, t));
}

function connectedSubjectWithId(id, t) {
  return findFromList(id, filterFactsAndSelectThings(/* PROPERTY */1, /* SUBJECT */0, t));
}

var Internal = {
  findFromList: findFromList,
  unpackOptionList: unpackOptionList,
  filterFacts: filterFacts,
  facts: facts,
  isEdgeForFacts: isEdgeForFacts,
  filterFactsAndSelectThings: filterFactsAndSelectThings,
  connectedPropertyThings: connectedPropertyThings,
  connectedSubjectThings: connectedSubjectThings,
  connectedPropertyWithId: connectedPropertyWithId,
  connectedSubjectWithId: connectedSubjectWithId
};

exports.init = init;
exports.Internal = Internal;
/* Graph_T-BsKen Not a pure module */
