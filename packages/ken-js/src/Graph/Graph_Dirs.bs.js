// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Graph_T$BsKen = require("./Graph_T.bs.js");
var RList$Rationale = require("rationale/src/RList.js");
var Function$Rationale = require("rationale/src/Function.js");

function bases(t) {
  return t.bases;
}

function makeDirs(t) {
  var allThingIdStrings = List.map((function (e) {
          return e.thingId.thingIdString;
        }), $$Array.to_list(Js_dict.values(t.things)));
  var partial_arg = List.filter((function (e) {
          return !Graph_T$BsKen.Directory.isFactDirectory(e);
        }));
  var partial_arg$1 = function (param) {
    return Function$Rationale.Infix.$pipe$pipe$great((function (param) {
                  return List.map(Graph_T$BsKen.Directory.parent, param);
                }), partial_arg, param);
  };
  var partial_arg$2 = function (param) {
    return Function$Rationale.Infix.$pipe$pipe$great(partial_arg$1, (function (param) {
                  return List.map(Graph_T$BsKen.Directory.allSubdirectories, param);
                }), param);
  };
  var partial_arg$3 = function (param) {
    return Function$Rationale.Infix.$pipe$pipe$great(partial_arg$2, List.concat, param);
  };
  var possibleUniqueIds = function (param) {
    return Function$Rationale.Infix.$pipe$pipe$great(partial_arg$3, RList$Rationale.uniq, param);
  };
  var directories = Curry._1(possibleUniqueIds, allThingIdStrings);
  return {
          things: t.things,
          facts: t.facts,
          bases: t.bases,
          directories: directories
        };
}

exports.bases = bases;
exports.makeDirs = makeDirs;
/* Graph_T-BsKen Not a pure module */
