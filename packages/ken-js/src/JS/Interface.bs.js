// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Graph_T$BsKen = require("../Graph/Graph_T.bs.js");
var Graph_Dirs$BsKen = require("../Graph/Graph_Dirs.bs.js");
var Graph_Fact$BsKen = require("../Graph/Graph_Fact.bs.js");
var Graph_Graph$BsKen = require("../Graph/Graph_Graph.bs.js");
var Graph_Value$BsKen = require("../Graph/Graph_Value.bs.js");
var Function$Rationale = require("rationale/src/Function.js");
var Graph_Fact_Query$BsKen = require("../Graph/Graph_Fact_Query.bs.js");
var Graph_Fact_Filters$BsKen = require("../Graph/Graph_Fact_Filters.bs.js");
var SimpleFactList_ToGraph$BsKen = require("../AlternativeGraphFormats/SimpleFactList_ToGraph.bs.js");
var CompressedImporter__FromJson$BsKen = require("../Importers/CompressedImporter/CompressedImporter__FromJson.bs.js");
var CompressedImporter__ToSimpleFactList$BsKen = require("../Importers/CompressedImporter/CompressedImporter__ToSimpleFactList.bs.js");

function fromJson(param) {
  return Function$Rationale.Infix.$pipe$pipe$great((function (param) {
                return Function$Rationale.Infix.$pipe$pipe$great((function (param) {
                              return Function$Rationale.Infix.$pipe$pipe$great(CompressedImporter__FromJson$BsKen.run, CompressedImporter__ToSimpleFactList$BsKen.run, param);
                            }), SimpleFactList_ToGraph$BsKen.run, param);
              }), Graph_Dirs$BsKen.makeDirs, param);
}

var things = Graph_T$BsKen.F.thingArray;

var facts = Graph_T$BsKen.F.factArray;

var factList = Graph_T$BsKen.F.factList;

function directoryArray(param) {
  return Function$Rationale.Infix.$pipe$pipe$great(Graph_T$BsKen.F.directories, $$Array.of_list, param);
}

function childDirectories(g, s) {
  return $$Array.of_list(Graph_T$BsKen.F.childDirectories(g, s));
}

function rootDirectories(param) {
  return Function$Rationale.Infix.$pipe$pipe$great(Graph_T$BsKen.F.rootDirectories, $$Array.of_list, param);
}

var findThing = Graph_T$BsKen.F.findThing;

var EdgeTypes = {
  property: /* PROPERTY */1,
  subject: /* SUBJECT */0
};

var Graph = {
  fromJson: fromJson,
  things: things,
  facts: facts,
  factList: factList,
  directoryArray: directoryArray,
  childDirectories: childDirectories,
  rootDirectories: rootDirectories,
  findThing: findThing,
  findThingFromFact: Graph_Graph$BsKen.findThingFromFact,
  to_json: Graph_Graph$BsKen.to_json,
  EdgeTypes: EdgeTypes
};

var to_json = Graph_T$BsKen.Thing.to_json;

var Thing = {
  to_json: to_json
};

var parent = Graph_T$BsKen.Directory.parent;

var Directory = {
  parent: parent
};

var Fact = {
  to_json: Graph_Fact$BsKen.to_json,
  value: Graph_Fact$BsKen.value
};

var Filter = Graph_Fact_Filters$BsKen;

var from_json = Graph_Fact_Query$BsKen.Query.from_json;

var Query = {
  from_json: from_json
};

var Value = Graph_Value$BsKen;

var list_to_array = $$Array.of_list;

exports.Graph = Graph;
exports.Thing = Thing;
exports.Directory = Directory;
exports.Fact = Fact;
exports.Filter = Filter;
exports.Query = Query;
exports.Value = Value;
exports.list_to_array = list_to_array;
/* Graph_T-BsKen Not a pure module */
