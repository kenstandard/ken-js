// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");

function log2(v1, v2) {
  console.log(v1, v2);
  return v2;
}

var isEqual = Caml_obj.caml_equal;

var isNotEqual = Caml_obj.caml_notequal;

function accumulator(_history, _accum, f, _l) {
  while(true) {
    var l = _l;
    var accum = _accum;
    var history = _history;
    if (l) {
      var newel = Curry._2(f, accum, l[0]);
      _l = l[1];
      _accum = newel;
      _history = List.append(history, /* :: */[
            newel,
            /* [] */0
          ]);
      continue ;
    } else {
      return history;
    }
  };
}

function asList(fn, e) {
  return $$Array.of_list(Curry._1(fn, $$Array.to_list(e)));
}

function asArray(fn, e) {
  return $$Array.to_list(Curry._1(fn, $$Array.of_list(e)));
}

exports.log2 = log2;
exports.isEqual = isEqual;
exports.isNotEqual = isNotEqual;
exports.accumulator = accumulator;
exports.asList = asList;
exports.asArray = asArray;
/* No side effect */
